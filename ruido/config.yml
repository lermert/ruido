###################################################
## CONFIGURATION FILE FOR RUIDO                  ##
## copy this file to working dir. and edit       ##
## pass the path to the edited file as argument  ##
## to ruido_main.py                              ##
###################################################

# =================================================
# GENERAL CONFIGURATION
# =================================================
# what to do?
do_clustering: true
do_stacking: true
do_measurement: true
# Print (more) output or not
print_debug: true
# Path to h5 files (e.g. from ants_2)
# you can use wildcard "*" (e.g. if data split over
# day or year directories with same name pattern) 
# this will be the directory that clustering and 
# stacking both look for input
input_directories: tests/test*/
# stations, channels to consider
stations:
- MULU
# channels as they appear in data
# e.g. if data files are named MULU.HHZ--MULU.HHN,
# order the list as [HHZ, HHN]
channels:
- HHZ
- HHN
- HHE
# drop autocorrelations: if true, then all auto-
# correlations (like BHE-BHE, BHN-BHN) etc will be 
# ignored.
drop_autocorrelations: false
# only single station correlations?
only_singlestation: true
# frequency bands: These will be used throughout
# clustering, stacking and measurement.
freq_bands:
-   - 0.25
    - 0.5
-   - 0.5
    - 1.0
# filter type: "bandpass" (butterworth)
# or "cheby2_bandpass" (Chebysheff bandpass)
# or "cheby2_lowpass" (Chebysheff lowpass)
# filtering will be applied for clustering
# and also before stacking
filt_type: "bandpass"
# max. order
# only relevant for cheby2_bandpass filter
filt_maxord: 18 
# directory where to save clusters
cluster_dir: output/clusters
# directory where to save stacks
stack_dir: output/stacks
# directory where to save measurements
msr_dir: output/measurements

# =================================================
# CLUSTERING CONFIGURATION
# =================================================
# Int. nr. of random samples to be pulled from each file
# e.g.: If there are 5 files for station G.UNM..HHZ
# then this will randomly select n_samples_each_file
# from each of them.
# if you want to use all available data, set to "all"
n_samples_each_file: 1000
# cluster per file, and then try to match day-times
# of the clusters: if not, windows from all files
# will be compared to each other.
# if time is longer than 5 years, then
# cluster_by_file: true is probably advisable
cluster_by_file: false
# clustering is done in windows of the whole cc wave
# form (assuming that not every wiggle up to very 
# long lag is important). Windows are symmetric Tukey
# around twin_mid (in seconds, of lag)
# and with a duration of hw_factor times the 
# longest period in the resp. frequency band.
# center of window in terms of lag, seconds
twin_mid: 0.0
# halfwidth in terms of longest period
# or set to "full" to use the entire waveform
hw_factor: 10
# scaling type: standard or simple (to be performed before pca
# and on the final set of data before clustering)
scaling_type: standard
# number of principal components to keep
# integer or float between 0 and 1 or "mle"
# if integer: This many modes will be kept
# if float: This level of variance will be fit
# if "mle": Bayesian dimensionality selection used
nr_pc: 5
# n clusters to try out. 
# the final number will be based on estimating 
# the "knee" of the Bayesian information criterion 
# (as implemented by Viens & Iwata)
nclustmin: 2
nclustmax: 12
# alternatively: Fix manually nr. clusters (usually
# after test run for n_clusters)
n_clusters: 4
# maximum nr. of iterations for Gaussian mixture model fitting
max_gmm_iter: 10000
# tolerance for interrupting iterations for GMM
gmm_iter_tol: 1.0e-3
# regularization of covariance for GMM
gmm_reg_covar: 1.0e-6
# number of randomly initialized runs for each GMM
gmm_n_init: 1
# put out info every 100 iterations in GMM
gmm_verbose: true
# apply spectral whitening before clustering
# whitening will be applied between 0.75 * the lowest
# frequency and 1.5 the highest freq. of the relevant
# frequency band
do_whiten_cluster: false
# smoothing window during spectral whitening in samples
whiten_nsmooth_cluster: 10

# =================================================
# STACKING CONFIGURATION
# =================================================
# duration of stack in seconds
duration: 864000
# step between stacks, in seconds
step: 864000
# minimum number of windows. Stacks with fewer windows
# will be discarded
minimum_stack_len: 100
# Begin time: YYYY,ddd (Julian day) or YYYY,MM,DD
t0: 1995,001
# end time: YYYY,ddd (Julian day) or YYYY,MM,DD
t1: 2021,02,01
# type of stacking: linear or robust
stackmode: linear
# stopping criterion for the iterations of robust stack
# ignored if stackmode is "linear"
robuststack_epsilon: 1.e-3
# apply spectral whitening before stack
# whitening will be applied between 0.75 * the lowest
# frequency and 1.5 the highest freq. of the relevant
# frequency band
do_whiten: false
# smoothing window during spectral whitening in samples
whiten_nsmooth: 10
# selecting correlation windows by RMS amplitude
# all windows over this percentile of RMS amplitude
# will be discarded.
# e.g. : with percentile_rms: 50, that half of the windows
# with the largest amplitude will be discarded.
# if you want to keep all windows, set to 100
percentile_rms: 75
# use waveform clusters for data selection during stacking
# (see Viens & Iwata, JGR 2020)
use_clusters: false

# =================================================
# MEASUREMENT CONFIGURATION
# =================================================
# measurement type: "stretching" or "cc_timeshift"
measurement_type: stretching
# if using cc timeshift: specify windows at how many times
# the longest period should be measured
# IMPORTANT: this is not in seconds but in multiples of 
# longest period (can be float value).
# will be ignored if measurement type is "stretching"
win_cc:
- 4
# reference type: "bootstrap" or "list" or "increment"
reference_type: bootstrap
# how many samples for bootstrapping
# (will be ignored for all other reference_type) 
bootstrap_samples: 50
# bootstrap type: "consecutive" means that the start time
# of the references is random, but then they are consecutive 
# stacks of duration reference_length_days
# "random" means that a random number of bootstrap_windows
# will be picked for each reference.
bootstrap_type: consecutive
# if bootstrap_type is random, set here the number of random
# windows for each reference
bootstrap_n_randomwindows: 40000
# reference_length_days: only relevant for bootstrap, and only
# if bootstrap_type is "consecutive"
reference_length_days: 365
# specified reference windows: only relevant for "list"
# specify a minimum of one pair (start end) in the format YYYY,jjj
reference_list:
-   - 1995,001
    - 1996,001
-   - 2000,001
    - 2001,001
# new_fs: if it is larger than current sampling rate of data,
# then the data will be interpolated
new_fs: 160.0
# window type to select lag window: boxcar or tukey or hann
window_type: boxcar
# ngrid for stretching measurement
ngrid: 50
# allow this many times more stretching than permitted normally
# note: any value larger than 1 can lead to cycle skipping.
# However, not permitting larger values can lead to saturating 
# dv/v if strong long-term change
skipfactor: 1
# "bad times": times that should be replaced by 0 velocity change
# due to data quality issues.
# only for reference_type = "brenguier"
skiptimes_inversion:
-   - 1998,180
    - 2000,001
-   - 2001,090
    - 2002,350
